
//BST
// #include <stdio.h>
// #include <stdlib.h>

// // Define the structure for a node in the BST
// struct Node {
//     int data;
//     struct Node* left;
//     struct Node* right;
// };

// // Function to create a new node
// struct Node* createNode(int data) {
//     struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
//     newNode->data = data;
//     newNode->left = newNode->right = NULL;
//     return newNode;
// }

// // Function to insert a new node into the BST
// struct Node* insert(struct Node* root, int data) {
//     if (root == NULL) {
//         return createNode(data);
//     }
    
//     if (data < root->data) {
//         root->left = insert(root->left, data);
//     } else if (data > root->data) {
//         root->right = insert(root->right, data);
//     }
    
//     return root;
// }

// // Function to perform in-order traversal of the BST
// void inorderTraversal(struct Node* root) {
//     if (root != NULL) {
//         inorderTraversal(root->left);
//         printf("%d ", root->data);
//         inorderTraversal(root->right);
//     }
// }
// // Function to find the minimum value in the BST
// int findMin(struct Node* root) {
//     struct Node* current = root;
    
//     while (current && current->left != NULL) {
//         current = current->left;
//     }
    
//     return current->data;
// }

// // Function to find the maximum value in the BST
// int findMax(struct Node* root) {
//     struct Node* current = root;
    
//     while (current && current->right != NULL) {
//         current = current->right;
//     }
    
//     return current->data;
// }

// int main() {
//     struct Node* root = NULL;
//     int choice, value;
    
//     while (1) {
//         printf("\nMenu:\n");
//         printf("3. Exit\n");
//         printf("1. Insert\n");
//         printf("2. In-order Traversal\n");
//         printf("3.Maximum Number\n");
//         printf("4.Minimum Number\n");
//         printf("Enter your choice: ");
//         scanf("%d", &choice);
        
//         switch (choice) {
//             case 1:
//                 printf("Enter value to insert: ");
//                 scanf("%d", &value);
//                 root = insert(root, value);
//                 break;
//             case 2:
//                 printf("In-order traversal: ");
//                 inorderTraversal(root);
//                 printf("\n");
//                 break;
//             case 3:
//             printf("%d is maximum number",findMax(root));
//             break;
//             case 4:
//             printf("%d is minimum number",findMin(root));
//             break;
//             case 0:
//                 exit(0);
//             default:
//                 printf("Invalid choice. Please try again.\n");
//         }
//     }
    
//     return 0;
// }
