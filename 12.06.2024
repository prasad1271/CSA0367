//Display the given array of 5th iteration element
#include<stdio.h>
#define size 5
int main()
{
    int array[size];
    printf("Enter the Array Elements :\n");
    for (int i=0;i<size;i++)
    {
        scanf("%d",&array[i]);
    }
    printf("Array Elements :");
    for (int i=0;i<size;i++)
    {
        printf("%d ",array[i]);
    }
    return 0;
}
//concatenate The two Arrays
#include<stdio.h>
#define size1 5
#define size2 4
int main()
{
    int size=size1 +size2 ;
    int array1[size1],array2[size2],array[size];
    printf("Enter the elements of array1 :");
    for (int i=0;i<size1;i++)
    {
        scanf("%d",&array1[i]);
    }
    printf("\nEnter the Elements of array2 :");
    for (int i=0;i<size2;i++)
    {
        scanf("%d",&array[i]);
    }
    for (int i=0;i<size1;i++)
    {
        array[i]=array1[i];
    }
    for (int i=0;i<size2;i++)
    {
        array[i+size1]=array2[i];
    }
    printf("After Concantenate two Arrays :");
    for (int i=0;i<size;i++)
    {
        printf("%d ",array[i]);
    }
    return 0;
}
//missing number in given array
#include<stdio.h>
int main()
{
    int array[]={7,4,3,5,1,2,};
    int size=sizeof(array)/sizeof(array[0]);
    int total=(size+1)*(size+2)/2;
    int sum=0;
    for(int i=0;i<size;i++)
    {
        sum+=array[i];
    }
    int missing=total-sum;
    printf("%d is the missing number in given array..\n",missing);

    return 0;
}
//Sorting the array in ascending order and descending order
#include<stdio.h>
#define size 6
int main()
{
    int array[size];
    printf("Enter 6 Elements :");
    for (int i=0;i<size;i++)
    {
        scanf("%d",&array[i]);
    }
    printf("\nAscending order :");
    for (int i=0;i<size;i++)
    {
        for (int j=0;j<size;j++)
        {
            if(array[i]<array[j])
            {
                int t=array[i];
                array[i]=array[j];
                array[j]=t;
            }
        }
    }
    for (int i=0;i<size;i++)
    {
        printf("%d ",array[i]);
    }
    printf("\nDescending Order :");
    for (int i=0;i<size;i++)
    {
        for (int j=0;j<size;j++)
        {
            if(array[i]>array[j])
            {
                int t=array[i];
                array[i]=array[j];
                array[j]=t;
            }
        }
    }
    for (int i=0;i<size;i++)
    {
        printf("%d ",array[i]);
    }
    printf("\n");
    return 0;

}

//BST
// #include <stdio.h>
// #include <stdlib.h>

// // Define the structure for a node in the BST
// struct Node {
//     int data;
//     struct Node* left;
//     struct Node* right;
// };

// // Function to create a new node
// struct Node* createNode(int data) {
//     struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
//     newNode->data = data;
//     newNode->left = newNode->right = NULL;
//     return newNode;
// }

// // Function to insert a new node into the BST
// struct Node* insert(struct Node* root, int data) {
//     if (root == NULL) {
//         return createNode(data);
//     }
    
//     if (data < root->data) {
//         root->left = insert(root->left, data);
//     } else if (data > root->data) {
//         root->right = insert(root->right, data);
//     }
    
//     return root;
// }

// // Function to perform in-order traversal of the BST
// void inorderTraversal(struct Node* root) {
//     if (root != NULL) {
//         inorderTraversal(root->left);
//         printf("%d ", root->data);
//         inorderTraversal(root->right);
//     }
// }
// // Function to find the minimum value in the BST
// int findMin(struct Node* root) {
//     struct Node* current = root;
    
//     while (current && current->left != NULL) {
//         current = current->left;
//     }
    
//     return current->data;
// }

// // Function to find the maximum value in the BST
// int findMax(struct Node* root) {
//     struct Node* current = root;
    
//     while (current && current->right != NULL) {
//         current = current->right;
//     }
    
//     return current->data;
// }

// int main() {
//     struct Node* root = NULL;
//     int choice, value;
    
//     while (1) {
//         printf("\nMenu:\n");
//         printf("3. Exit\n");
//         printf("1. Insert\n");
//         printf("2. In-order Traversal\n");
//         printf("3.Maximum Number\n");
//         printf("4.Minimum Number\n");
//         printf("Enter your choice: ");
//         scanf("%d", &choice);
        
//         switch (choice) {
//             case 1:
//                 printf("Enter value to insert: ");
//                 scanf("%d", &value);
//                 root = insert(root, value);
//                 break;
//             case 2:
//                 printf("In-order traversal: ");
//                 inorderTraversal(root);
//                 printf("\n");
//                 break;
//             case 3:
//             printf("%d is maximum number",findMax(root));
//             break;
//             case 4:
//             printf("%d is minimum number",findMin(root));
//             break;
//             case 0:
//                 exit(0);
//             default:
//                 printf("Invalid choice. Please try again.\n");
//         }
//     }
    
//     return 0;
// }
