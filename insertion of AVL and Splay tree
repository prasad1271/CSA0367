//spaly insertion
struct node*spaly(struct node*root,int key)
{
    if (root==NULL||root->key==key)
    return root;
    if (key<root->key)
    {
        if (root->left==NULL)
        {
            return root;
        }
        if (key<root->left->key)
        {
            root->left->left=spaly(root->left->left,key);
            return rightrotate(root);
        }
        else if (key>root->left->key)
        {
            root->left->right=spaly(root->left->right,key);
            if(root->left!=NULL)
            root->left=leftrotate(root->left);
        }
        return (root->left==NULL)?root:rightrotate(root);
    }
    else
    {
        if (root->right==NULL)
        {
            return root;
        }
        if (key>root->right->key)
        {
            root->right->right=spaly(root->right->right,key);
            root=leftrotate(root);
        }
        else if (key<root->right->key)
        {
            root->right->right=spaly(root->right->right,key);
            if(root->right!=NULL)
            root->right=rightrotate(root->right);
        }
        return (root->right==NULL)?root:leftrotate(root);
    }
}
struct node*insert(struct node*root,int key)
{
    if (root==NULL)
    {
        return createnode(key);
    }
    if (key<root->key)
    {
        struct node*new=createnode(key);
        new->right=root;
        new->left=root->left;
        root->left=NULL;
        return new;
    }
    else if(key>root->key)
    {
        struct node*new=createnode(key);
        new->left=root;
        new->right=root->right;
        root->right=NULL;
        return new;
    }
    return root;
}
//AVL INSERTION
struct Node *insert(struct Node* node, int key){
    if (node == NULL)
        return  createNode(key);
 
    if (key < node->key)
        node->left  = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
 
    node->height = 1 + max(getHeight(node->left), getHeight(node->right));
    int bf = getBalanceFactor(node);
 
    // Left Left Case
        if(bf>1 && key < node->left->key){
            return rightRotate(node);
        }
    // Right Right Case
        if(bf<-1 && key > node->right->key){
            return leftRotate(node);
        }
    // Left Right Case
    if(bf>1 && key > node->left->key){
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }
    // Right Left Case
    if(bf<-1 && key < node->right->key){
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }
    return node;
}
 
