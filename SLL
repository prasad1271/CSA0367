#include <stdio.h>
#include <stdlib.h> // Include stdlib for malloc
#include<limits.h>

struct node {
    int data;
    struct node *next;
} *start = NULL;
void create() {
    struct node *current, *new_node;
    int n; 
    int i; 

    printf("Enter the size of the list: ");
    scanf("%d", &n);
    printf("Enter the elements to Create :");
    for(i = 0; i < n; i++) { 
        new_node = (struct node *)malloc(sizeof(struct node)); 
        if(new_node == NULL) {
            printf("Memory allocation failed\n");
            return; 
        }
        scanf("%d", &new_node->data);
        new_node->next = NULL;

        if (start == NULL) {
            start = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
}
void insert_at_begin()
{
    struct node*current,*new_node;
    new_node=(struct node*)malloc(sizeof(struct node));
    printf("Enter the element to insert :");
    scanf("%d",&new_node->data);
    new_node->next=NULL;
    if (start==NULL)
    {
        start=new_node;
    }
    else
    {
        new_node->next=start;
        start=new_node;
    }
}
void insert_at_position()
{
    struct node*current,*new_node;
    int pos;
    new_node=(struct node*)malloc(sizeof(struct node));
    printf("Enter the element to insert :");
    scanf("%d",&new_node->data);
    printf("Enter the Position to Insert :");
    scanf("%d",&pos);
    if (start==NULL)
    {
        start=new_node;
    }
    else
    {
        current = start;
        for (int i=1;i<pos-1;i++)
        {
            current=current->next;
        }
        new_node->next=current->next;
        current->next=new_node;
    }
}
void insert_at_end()
{
    struct node*current,*new_node;
    new_node=(struct node*)malloc(sizeof(struct node));
    printf("Enter the element to insert :");
    scanf("%d",&new_node->data);
    new_node->next=NULL;
    if (start==NULL)
    {
        start=new_node;
    }
    else
    {
        current=start;
        while(current->next!=NULL)
        {
            current=current->next;

        }
        current->next=new_node;
    }

}
void delete_at_begin()
{
    struct node*del=start;
    start=start->next;
    free(del);
}
void delete_at_middle()
{
    struct node *current,*del;
    int ele;
    printf("Enter the element to delete :");
    scanf("%d",&ele);
    current=start;
    while (current->next!=NULL)
    {
        if (current->next->data==ele)
        {
            del=current->next;
            current->next=del->next;
            free(del);
        }
        else
        {
            current=current->next;
        }
    }
}
void delete_at_position() {
    struct node *current = start, *previous = NULL;
    int pos, i = 1;
    printf("Enter the position of the element to delete: ");
    scanf("%d", &pos);

    if (pos == 1) {
        start = current->next;
        free(current);
        return;
    }

    while (current != NULL && i < pos) {
        previous = current;
        current = current->next;
        i++;
    }
    if (current == NULL) {
        printf("Position does not exist.\n");
    } else {
        previous->next = current->next;
        free(current);
    }
}

void delete_at_end()
{
    struct node*current,*del;
    current=start;
    while (current->next->next!=NULL)
    {
        current=current->next;
    }
    del=current->next;
    current->next=NULL;
    free(del);
}
void difference_min_max() {
    if (start == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct node *current = start;
    int min = INT_MAX, max = INT_MIN;
    while (current != NULL) {
        if (current->data > max) {
            max = current->data;
        }
        if (current->data < min) {
            min = current->data;
        }
        current = current->next;
    }
    int result = max - min;
    printf("%d is the difference between the minimum and maximum element in this list.\n", result);
}

struct node* reverse_elements(struct node* start) {
    struct node *current, *prev, *next;
    prev = NULL;
    current = start;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    start = prev;
    return start;
}

void display() {
    struct node *current = start; 
    printf("The Elements in List :\n");
    while (current != NULL) {
        printf("%d ", current->data); 
        current = current->next; 
    }
    printf("\n"); 
}
void searching() {
    int ele, flag = 0;
    struct node *current = start;
    printf("Enter the element to Search :");
    scanf("%d", &ele);
    while(current != NULL) {
        if (current->data == ele) {
            flag++;
        }
        current = current->next; 
    }
    if (flag > 0) {
        printf("The searching element found %d time(s) in list\n", flag);
    } else {
        printf("The searching element not found in list\n");
    }
}
int main() {
    create();
    int ch;
    printf("1.Insert Element At Begin\n2.Insert Element At Middle\n3.Insert At End\n4.Searching An Element In List\n5.Delete At Begin\n6.Delete At Middle\n7.Delete At End\n8.Difference Between Minimum And Maximum in list\n");
    printf("9.Delete at position\n10.Reverse the elements in list\n");
    printf("Enter the Number to operate The operation :");
    scanf("%d",&ch);
    switch (ch)
    {
        case 1:
        insert_at_begin();
        display();
        break;
        case 2:
        insert_at_position();
        display();
        break;
        case 3:
        insert_at_end();
        display();
        break;
        case 4:
        searching();
        break;
        case 5:
        delete_at_begin();
        display();
        break;
        case 6:
        delete_at_middle();
        display();
        break;
        case 7:
        delete_at_end();
        display();
        break;
        case 8:
        difference_min_max();
        break;
        case 9:
        delete_at_position();
        display();
        break;
        case 10:
        start=reverse_elements(start);
        display();
        break;
        default :
        printf("Not found.\n");
        break;
    }
    return 0;
}
